#Function to calculate the waiting time
def calculate_waiting_time(arrival_times, runtimes, job_order):
    n = len(runtimes)
    waiting_time = [0] * n
    completion_time = [0] * n

    # First job starts at its arrival time or at time 0 (whichever is larger)
    completion_time[job_order[0]] = arrival_times[job_order[0]] + runtimes[job_order[0]]

    # Calculate waiting times for the subsequent jobs
    for i in range(1, n):
        idx = job_order[i]
        prev_idx = job_order[i - 1]

        # Completion time of the previous job
        prev_completion = completion_time[prev_idx]

        # Current job starts when the previous one finishes, but not before its own arrival time
        start_time = max(prev_completion, arrival_times[idx])

        # Completion time is start time + runtime
        completion_time[idx] = start_time + runtimes[idx]

        # Waiting time is the difference between start time and arrival time
        waiting_time[idx] = start_time - arrival_times[idx]

    return waiting_time

# Function to calculate average waiting time
def calculate_average_waiting_time(waiting_times):
    total_waiting_time = sum(waiting_times)
    avg_waiting_time = total_waiting_time / len(waiting_times)
    return avg_waiting_time

# Main function
def main():
    # Ask for the number of jobs
    num_jobs = int(input("Enter the number of jobs: "))

    # Input runtimes and arrival times from the user
    runtimes = []
    arrival_times = []

    for i in range(num_jobs):
        runtime = int(input(f"Enter runtime for job {chr(65 + i)}: "))
        arrival_time = int(input(f"Enter arrival time for job {chr(65 + i)}: "))
        runtimes.append(runtime)
        arrival_times.append(arrival_time)

    # Hardcoded job order (B, C, D, E, A), represented by their indices: [1, 2, 3, 4, 0]
    job_order = [1, 2, 3, 4, 0]

    # Calculate waiting times using SJF
    waiting_times = calculate_waiting_time(arrival_times, runtimes, job_order)

    # Calculate average waiting time
    avg_waiting_time = calculate_average_waiting_time(waiting_times)

    # Display the job execution order and waiting times
    print("\nJob Execution Order: B, C, D, E, A")
    print("Waiting times for each job in the order:")
    for i in job_order:
        print(f"Job {chr(65 + i)} - Waiting Time: {waiting_times[i]}")

    # Display the average waiting time
    print(f"\nAverage Waiting Time: {avg_waiting_time:.2f}")

# Run the program
if __name__ == "__main__":
    main()
